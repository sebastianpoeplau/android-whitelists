diff --git a/vm/Dalvik.h b/vm/Dalvik.h
index eecbf8d..f51f41a 100644
--- a/vm/Dalvik.h
+++ b/vm/Dalvik.h
@@ -38,6 +38,8 @@
 #include "Native.h"
 #include "native/InternalNative.h"
 
+#include "Whitelist.h"
+
 #include "DalvikVersion.h"
 #include "Debugger.h"
 #include "Profile.h"
diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index 2f53391..37db9c6 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -110,6 +110,7 @@ LOCAL_SRC_FILES := \
 	Sync.cpp \
 	Thread.cpp \
 	UtfString.cpp \
+	Whitelist.cpp \
 	alloc/Alloc.cpp \
 	alloc/CardTable.cpp \
 	alloc/HeapBitmap.cpp.arm \
@@ -227,6 +228,7 @@ LOCAL_C_INCLUDES += \
 	dalvik/vm \
 	external/zlib \
 	libcore/include \
+	external/openssl/include \
 
 MTERP_ARCH_KNOWN := false
 
diff --git a/vm/Globals.h b/vm/Globals.h
index 234a57d..6c6274f 100644
--- a/vm/Globals.h
+++ b/vm/Globals.h
@@ -189,6 +189,11 @@ struct DvmGlobals {
     HashTable*  loadedClasses;
 
     /*
+     * The global whitelist of trusted executable files (e.g. APK, .dex).
+     */
+    Whitelist* executableWhitelist;
+
+    /*
      * Value for the next class serial number to be assigned.  This is
      * incremented as we load classes.  Failed loads and races may result
      * in some numbers being skipped, and the serial number is not
diff --git a/vm/Init.cpp b/vm/Init.cpp
index 9169a5d..ff34908 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -1456,6 +1456,9 @@ std::string dvmStartup(int argc, const char* const argv[],
     if (!dvmClassStartup()) {
         return "dvmClassStartup failed";
     }
+    if (!dvmWhitelistStartup()) {
+        return "dvmWhitelistStartup failed";
+    }
 
     /*
      * At this point, the system is guaranteed to be sufficiently
@@ -1998,6 +2001,7 @@ void dvmShutdown()
     dvmJniShutdown();
     dvmStringInternShutdown();
     dvmThreadShutdown();
+    dvmWhitelistShutdown();
     dvmClassShutdown();
     dvmRegisterMapShutdown();
     dvmInstanceofShutdown();
diff --git a/vm/JarFile.cpp b/vm/JarFile.cpp
index 3a037a0..96ac769 100644
--- a/vm/JarFile.cpp
+++ b/vm/JarFile.cpp
@@ -225,6 +225,13 @@ int dvmJarFileOpen(const char* fileName, const char* odexOutputName,
             close(fd);
             fd = -1;
             goto tryArchive;
+        } else if (dvmIsClassFileTrusted(cachedName, fd, 0) != 0) {
+            ALOGE("%s odex is not trusted", fileName);
+            free(cachedName);
+            cachedName = NULL;
+            close(fd);
+            fd = -1;
+            goto tryArchive;
         } else {
             ALOGV("%s odex has good dependencies", fileName);
             //TODO: make sure that the .odex actually corresponds
@@ -294,6 +301,17 @@ tryArchive:
                     result = dexZipExtractEntryToFile(&archive, entry, fd) == 0;
                     extractWhen = dvmGetRelativeTimeUsec();
                 }
+
+                /*
+                 * Make sure that the file is trusted.
+                 */
+                if (result) {
+                    if (dvmIsClassFileTrusted(fileName, fd, dexOffset) != 0) {
+                        ALOGE("Access denied: %s", fileName);
+                        goto bail;
+                    }
+                }
+
                 if (result) {
                     result = dvmOptimizeDexFile(fd, dexOffset,
                                 dexGetZipEntryUncompLen(&archive, entry),
@@ -315,6 +333,17 @@ tryArchive:
                     (int) (extractWhen - startWhen) / 1000,
                     (int) (endWhen - extractWhen) / 1000);
             }
+            else {
+                /*
+                 * There is an optimized version of the file available, but
+                 * it might have been created without a whitelist check during the installation. So
+                 * make sure now that the file is trusted.
+                 */
+                if (dvmIsClassFileTrusted(fileName, -1, 0) != 0) {
+                    ALOGE("Access denied: %s", fileName);
+                    goto bail;
+                }
+            }
         } else {
             ALOGI("Zip is good, but no %s inside, and no valid .odex "
                     "file in the same directory", kDexInJarName);
diff --git a/vm/Native.cpp b/vm/Native.cpp
index 8892c2a..dfe65a4 100644
--- a/vm/Native.cpp
+++ b/vm/Native.cpp
@@ -352,6 +352,42 @@ bool dvmLoadNativeCode(const char* pathName, Object* classLoader,
     }
 
     /*
+     * Make sure that the shared library is trusted. The higher-level APIs
+     * that rely on us should make sure that we are always called with complete paths
+     * (System.loadLibrary() resolves the given library name, System.load()
+     * expects a path as per the documentation). Therefore, we classify every
+     * file that we cannot find as untrusted.
+     *
+     * During initialization of the VM we are called without a path for
+     * two (hardcoded) libraries. We handle these as exceptions.
+     *
+     * TODO: Handle those special cases.
+     * TODO: Implement.
+     */
+    bool clear = false;
+    if (strchr(pathName, '/') == NULL) {
+        char nameBuffer[256];
+        const char *startupLibs[] = {"javacore", "nativehelper", NULL};
+
+        for (const char **current = startupLibs; *current != NULL; current++) {
+            snprintf(nameBuffer, 256, OS_SHARED_LIB_FORMAT_STR, *current);
+            if (strcmp(pathName, nameBuffer) == 0) {
+                clear = true;
+                break;
+            }
+        }
+    }
+    else {
+        clear = (dvmIsClassFileTrusted(pathName, -1, 0) == 0);
+    }
+
+    if (!clear) {
+        ALOGE("Shared library %s is not trusted", pathName);
+        *detail = strdup("Shared library is not trusted");
+        return false;
+    }
+
+    /*
      * Open the shared library.  Because we're using a full path, the system
      * doesn't have to search through LD_LIBRARY_PATH.  (It may do so to
      * resolve this library's dependencies though.)
diff --git a/vm/RawDexFile.cpp b/vm/RawDexFile.cpp
index 4598767..c00d8a0 100644
--- a/vm/RawDexFile.cpp
+++ b/vm/RawDexFile.cpp
@@ -188,6 +188,18 @@ int dvmRawDexFileOpen(const char* fileName, const char* odexOutputName,
             copyWhen = dvmGetRelativeTimeUsec();
         }
 
+        /*
+         * The file that optFd points to now contains the raw dex
+         * without any optimizations. It is locked, so now it's time
+         * for our whitelist check.
+         */
+        if (result) {
+            if (dvmIsClassFileTrusted(fileName, optFd, dexOffset) != 0) {
+                ALOGE("Access denied: %s", fileName);
+                goto bail;
+            }
+        }
+
         if (result) {
             result = dvmOptimizeDexFile(optFd, dexOffset, fileSize,
                 fileName, modTime, adler32, isBootstrap);
@@ -250,6 +262,11 @@ int dvmRawDexFileOpenArray(u1* pBytes, u4 length, RawDexFile** ppRawDexFile)
 {
     DvmDex* pDvmDex = NULL;
 
+    if (dvmIsClassDataTrusted(pBytes, length) != 0) {
+        ALOGE("Access denied: class data is not whitelisted");
+        return -1;
+    }
+
     if (!dvmPrepareDexInMemory(pBytes, length, &pDvmDex)) {
         ALOGD("Unable to open raw DEX from array");
         return -1;
diff --git a/vm/ReconfigureDvm.mk b/vm/ReconfigureDvm.mk
index 6e161c9..1b749d3 100644
--- a/vm/ReconfigureDvm.mk
+++ b/vm/ReconfigureDvm.mk
@@ -23,6 +23,7 @@ include $(LOCAL_PATH)/Dvm.mk
 
 LOCAL_SHARED_LIBRARIES += \
 	libcorkscrew \
+	libcrypto \
 	libcutils \
 	libdl \
 	liblog \
diff --git a/vm/Whitelist.cpp b/vm/Whitelist.cpp
new file mode 100644
index 0000000..6cf9f6f
--- /dev/null
+++ b/vm/Whitelist.cpp
@@ -0,0 +1,607 @@
+#include "Dalvik.h"
+
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <openssl/evp.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <arpa/inet.h>
+#include <sys/mman.h>
+#include <sys/inotify.h>
+#include <pthread.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+/*
+ * The hash algorithm and the size of the digest.
+ * These defines must correspond at all times - we
+ * use the fixed length definition to be able to declare
+ * fixed-length arrays.
+ */
+#define WHITELIST_HASH_ALGORITHM EVP_sha256()
+#define WHITELIST_HASH_DIR_NAME "/data/whitelist/" 
+
+struct WhitelistFile {
+    u4 hashLenBytes;
+    u4 numEntries;
+    /* variable-length array */
+    WhitelistEntry entries[];
+};
+
+/*
+ * Helper function: compare two whitelist entries.
+ */
+static int compareWhitelistEntries(const WhitelistEntry *tableItem, const WhitelistEntry *looseItem) {
+    return memcmp(tableItem, looseItem, sizeof(WhitelistEntry));
+}
+
+/*
+ * Helper function: free a whitelist entry.
+ */
+static void freeWhitelistEntry(void *entry) {
+    free(entry);
+}
+
+/*
+ * Load all whitelist files into the global whitelist table.
+ *
+ * Whitelist files must be located in the directory hashDirName and have the following
+ * format:
+ * 4 bytes - Length of a single hash value in bytes (big endian)
+ * 4 bytes - Number of hash values to follow (big endian)
+ * n bytes - Hash values of whitelisted files
+ *
+ * The length of the hash values must be WHITELIST_HASH_LEN, otherwise the file is not
+ * considered.
+ *
+ * Returns 0 on success.
+ */
+int loadHashList(HashTable *table) {
+    int result = -1;
+    DIR *hashDir;
+    struct dirent *dirEnt;
+    int fd;
+    char hashFile[PATH_MAX];
+    off_t fileSize;
+    WhitelistFile *whitelist;
+    WhitelistEntry *newEntry;
+
+    hashDir = opendir(WHITELIST_HASH_DIR_NAME);
+    if (hashDir == NULL) {
+        ALOGE("Unable to open whitelist directory %s: %s", WHITELIST_HASH_DIR_NAME, strerror(errno));
+        goto bail;
+    }
+
+    /*
+     * Iterate over all files in the whitelist directory.
+     */
+    strcpy(hashFile, WHITELIST_HASH_DIR_NAME);
+    while ((dirEnt = readdir(hashDir)) != NULL) {
+        if (strcmp(dirEnt->d_name, ".") == 0 || strcmp(dirEnt->d_name, "..") == 0)
+            continue;
+
+        strcpy(hashFile + strlen(WHITELIST_HASH_DIR_NAME), dirEnt->d_name);
+        fd = open(hashFile, O_RDONLY);
+        if (fd < 0) {
+            ALOGW("Unable to open whitelist file %s: %s", hashFile, strerror(errno));
+            goto loop_final;
+        }
+
+        fileSize = lseek(fd, (off_t) 0, SEEK_END);
+        if (fileSize == (off_t) -1) {
+            ALOGW("Unable to determine the size of file %s: %s", hashFile, strerror(errno));
+            goto loop_final;
+        }
+
+        if (lseek(fd, (off_t) 0, SEEK_SET) < 0) {
+            ALOGW("Unable to rewind file %s: %s", hashFile, strerror(errno));
+            goto loop_final;
+        }
+
+        ALOGD("Reading whitelist file %s (%d bytes)", hashFile, (unsigned int) fileSize);
+        whitelist = (WhitelistFile*) mmap(NULL, fileSize, PROT_READ, MAP_PRIVATE, fd, 0);
+        if (whitelist == MAP_FAILED) {
+            ALOGW("Unable to map whitelist file %s into memory: %s", hashFile, strerror(errno));
+            goto loop_final;
+        }
+
+        if (ntohl(whitelist->hashLenBytes) != WHITELIST_HASH_LEN ||
+                ntohl(whitelist->numEntries) * WHITELIST_HASH_LEN != fileSize - offsetof(WhitelistFile, entries)) {
+            ALOGW("Broken whitelist file: %s", hashFile);
+            goto loop_final;
+        }
+
+        /*
+         * Insert the hashes from the file into the global whitelist.
+         */
+        for (u8 i = 0; i < ntohl(whitelist->numEntries); i++) {
+            /*
+             * No need for locking here, since this module uses hash tables only locally.
+             */
+            newEntry = (WhitelistEntry*) malloc(sizeof(WhitelistEntry));
+            if (newEntry == NULL) {
+                ALOGE("Unable to allocate memory!");
+                goto loop_final;
+            }
+
+            memcpy(newEntry, &whitelist->entries[i], sizeof(WhitelistEntry));
+            dvmHashTableLookup(table, newEntry->digest.shortDigest, newEntry,
+                    (HashCompareFunc) compareWhitelistEntries, true);
+        }
+
+loop_final:
+        if (whitelist != MAP_FAILED) {
+            if (munmap(whitelist, fileSize) < 0)
+                ALOGW("Unable to unmap file %s from memory: %s", hashFile, strerror(errno));
+            whitelist = (WhitelistFile*) MAP_FAILED;
+        }
+
+        if (fd >= 0) {
+            if (close(fd) < 0)
+                ALOGW("Found error when closing file %s: %s", hashFile, strerror(errno));
+            fd = -1;
+        }
+    }
+
+    result = 0;
+
+bail:
+    if (hashDir != NULL) {
+        closedir(hashDir);
+        hashDir = NULL;
+    }
+
+    return result;
+}
+
+/*
+ * Helper function for qsort.
+ */
+static int qsortHelper(const void *one, const void *two) {
+    return compareWhitelistEntries((WhitelistEntry*) one, (WhitelistEntry*) two);
+}
+
+/*
+ * Update the global whitelist by first creating a new list in shared memory
+ * before replacing the existing list with it.
+ */
+static void updateGlobalWhitelist() {
+    int numEntries, currentIndex;
+
+    HashTable *whitelist = dvmHashTableCreate(256, freeWhitelistEntry);
+    if (whitelist == NULL) {
+        ALOGE("Failed to initialze the class file whitelist");
+        goto bail;
+    }
+
+    if (loadHashList(whitelist) != 0) {
+        /*
+         * Loading the whitelist from disk failed. Thus, we cannot execute any APKs
+         * except those below /system. We continue nevertheless in order to not block
+         * the system entirely.
+         */
+        ALOGW("Failed to load whitelist - only system apps will be available!");
+        goto bail;
+    }
+
+    /*
+     * Lock the global list and replace the old entries with the new ones.
+     */
+    if (pthread_mutex_lock(&gDvm.executableWhitelist->mutex) != 0) {
+        ALOGW("Failed to lock the global whitelist for updating");
+        goto bail;
+    }
+
+    numEntries = dvmHashTableNumEntries(whitelist);
+
+    HashIter iter;
+    currentIndex = 0;
+    for (dvmHashIterBegin(whitelist, &iter); !dvmHashIterDone(&iter) && currentIndex < WHITELIST_MAX_LEN; dvmHashIterNext(&iter)) {
+        memcpy(&gDvm.executableWhitelist->entries[currentIndex], dvmHashIterData(&iter), sizeof(WhitelistEntry));
+        currentIndex++;
+    }
+
+    if (currentIndex < numEntries) {
+        ALOGW("Whitelist overflow - some entries cannot be considered");
+        numEntries = currentIndex;
+    }
+
+    /*
+     * Sort the array, so that we can run binary search on it.
+     */
+    qsort(gDvm.executableWhitelist->entries, numEntries, sizeof(WhitelistEntry), qsortHelper);
+
+    gDvm.executableWhitelist->numEntries = numEntries;
+    ALOGD("%d entries in the whitelist", gDvm.executableWhitelist->numEntries);
+
+    if (pthread_mutex_unlock(&gDvm.executableWhitelist->mutex) != 0) {
+        ALOGW("Failed to unlock the global whitelist after updating");
+        goto bail;
+    }
+
+bail:
+    if (whitelist != NULL)
+        dvmHashTableFree(whitelist);
+}
+
+/*
+ * Initialize inotify by setting up a watch for the whitelist file directory.
+ * We will use the notifications to determine when the whitelist has to be
+ * reloaded.
+ */
+static int initInotify() {
+    int inotifyFd, inotifyWatchDesc;
+    bool success = false;
+
+    inotifyFd = inotify_init();
+    if (inotifyFd < 0) {
+        ALOGW("Failed to initialze inotify: %s", strerror(errno));
+        goto bail;
+    }
+
+    inotifyWatchDesc = inotify_add_watch(inotifyFd, WHITELIST_HASH_DIR_NAME,
+            IN_CLOSE_WRITE | IN_DELETE | IN_MOVE);
+    if (inotifyWatchDesc < 0) {
+        ALOGW("Unable to initialize inotify watch for whitelist directory %s: %s",
+                WHITELIST_HASH_DIR_NAME, strerror(errno));
+        goto bail;
+    }
+
+    success = true;
+
+bail:
+    if (!success && inotifyFd >= 0) {
+        close(inotifyFd);
+        inotifyFd = -1;
+    }
+
+    return inotifyFd;
+}
+
+static void startWhitelistUpdater() {
+    pid_t newPid;
+    
+    newPid = fork();
+    if (newPid < 0) {
+        ALOGE("fork failed: %s", strerror(errno));
+        return;
+    }
+
+    if (newPid == 0) {
+        /*
+         * Child process
+         *
+         * This process will enter an infinite loop that waits for changes to the
+         * whitelist files. Whenever it detects a modification (via inotify),
+         * it reloads the whitelist in shared memory.
+         */
+        int inotifyFd = initInotify();
+        if (inotifyFd < 0)
+            exit(0);
+
+        while (true) {
+            /*
+             * Check if the whitelist files have changed. If so, recreate the global whitelist.
+             */
+            ssize_t len;
+            ssize_t currentOffset = 0;
+            union {
+                unsigned char buffer[sizeof(struct inotify_event) + NAME_MAX + 1];
+                struct inotify_event event;
+            } inotifyEvent;
+
+            while ((len = TEMP_FAILURE_RETRY(read(inotifyFd, inotifyEvent.buffer + currentOffset, sizeof(inotifyEvent.buffer) - currentOffset))) > 0) {
+                ALOGD("New inotify event for file %s", inotifyEvent.event.name);
+
+                updateGlobalWhitelist();
+
+                ssize_t dataAvailable = len + currentOffset;
+                ssize_t dataUsed = sizeof(struct inotify_event) + inotifyEvent.event.len;
+                if (dataAvailable > dataUsed) {
+                    memmove(inotifyEvent.buffer, inotifyEvent.buffer + dataUsed, dataAvailable - dataUsed);
+                }
+                currentOffset = dataAvailable - dataUsed;
+            }
+
+            if (len < 0) {
+                /*
+                 * Something is wrong with inotify, so we cannot check for updated whitelist files
+                 * anymore. Terminate the updater and load the new whitelist at reboot.
+                 */
+                ALOGE("Reading inotify events failed: %s", strerror(errno));
+                exit(0);
+            }
+
+            ALOGE("inotify fd closed");
+            exit(0);
+        }
+    }
+}
+
+/*
+ * Initialization of the whitelist module. Called from global startup in Init.cpp.
+ */
+bool dvmWhitelistStartup() {
+    bool success = false;
+    struct stat dirStat;
+    pthread_mutexattr_t mutexAttr;
+
+    /*
+     * Create the directory for whitelist files, if it does not exist.
+     */
+    if (stat(WHITELIST_HASH_DIR_NAME, &dirStat) != 0) {
+        if (mkdir(WHITELIST_HASH_DIR_NAME, 0644) != 0) {
+            ALOGE("Unable to create the whitelist directory");
+            goto bail;
+        }
+    }
+    else {
+        if (!S_ISDIR(dirStat.st_mode)) {
+            ALOGE("%s is not a directory", WHITELIST_HASH_DIR_NAME);
+            goto bail;
+        }
+    }
+
+    /*
+     * We want to keep the whitelist in shared memory
+     * for all child processes to use. A mutex protects the list, and the root
+     * instance of Dalvik is responsible for updating the whitelist.
+     */
+    gDvm.executableWhitelist = (Whitelist*) mmap(NULL, sizeof(Whitelist), PROT_READ | PROT_WRITE,
+            MAP_SHARED | MAP_ANONYMOUS, -1, 0);
+    if (gDvm.executableWhitelist == MAP_FAILED) {
+        ALOGW("Failed to allocate shared memory for the whitelist: %s", strerror(errno));
+        gDvm.executableWhitelist = NULL;
+        goto bail;
+    }
+
+    pthread_mutexattr_init(&mutexAttr);
+    if (pthread_mutexattr_setpshared(&mutexAttr, PTHREAD_PROCESS_SHARED) != 0) {
+        ALOGW("Failed to initialize the mutex for the global whitelist");
+        goto bail;
+    }
+    pthread_mutex_init(&gDvm.executableWhitelist->mutex, &mutexAttr);
+    pthread_mutexattr_destroy(&mutexAttr);
+
+    /*
+     * The whitelist structure is initialzed, so populate it now.
+     */
+    updateGlobalWhitelist();
+
+    /*
+     * Initialize the inotify system.
+     */
+    startWhitelistUpdater();
+    success = true;
+
+bail:
+    if (!success && gDvm.executableWhitelist != NULL) {
+        pthread_mutex_destroy(&gDvm.executableWhitelist->mutex);
+        munmap(gDvm.executableWhitelist, sizeof(Whitelist));
+        gDvm.executableWhitelist = NULL;
+    }
+
+    return success;
+}
+
+/*
+ * Whitelist cleanup. Called from global cleanup in Init.cpp.
+ */
+void dvmWhitelistShutdown() {
+    if (gDvm.executableWhitelist != NULL) {
+        /*
+         * We can't destroy the mutex right now, because it might
+         * still be used in other processes. However, we can unmap
+         * the shared memory in this process, since that will not
+         * affect the other processes.
+         */
+        munmap(gDvm.executableWhitelist, sizeof(Whitelist));
+        gDvm.executableWhitelist = NULL;
+    }
+}
+
+/*
+ * Check if the given hash is in the whitelist using binary search.
+ */
+static bool isInWhitelist(WhitelistEntry *entry) {
+    bool result = false;
+    int upper = 0, lower = 0;
+
+    /* Just a safeguard - this should not happen */
+    if (gDvm.executableWhitelist == NULL)
+        return false;
+
+    if (pthread_mutex_lock(&gDvm.executableWhitelist->mutex) != 0) {
+        ALOGW("Failed to lock the global whitelist for updating");
+        goto bail;
+    }
+
+    ALOGD("Searching %d entries in the whitelist", gDvm.executableWhitelist->numEntries);
+    upper = gDvm.executableWhitelist->numEntries - 1;
+    while (upper >= lower) {
+        int middle = (upper + lower) / 2;
+
+        int comp = compareWhitelistEntries(entry, &gDvm.executableWhitelist->entries[middle]);
+        if (comp < 0) {
+            upper = middle - 1;
+        }
+        else if (comp > 0) {
+            lower = middle + 1;
+        }
+        else {
+            lower = middle;
+            upper = middle;
+            break;
+        }
+    }
+
+    if (upper == lower)
+        result = true;
+
+    if (pthread_mutex_unlock(&gDvm.executableWhitelist->mutex) != 0) {
+        ALOGW("Failed to unlock the global whitelist after updating");
+        goto bail;
+    }
+
+bail:
+    return result;
+}
+
+/*
+ * Compute the hash of a file to open and decide based on a global whitelist
+ * whether the file is trustworthy.
+ *
+ * The file descriptor and offset are optional and must point to the offset in
+ * an open file that contains the contents of the file fileName. Otherwise pass
+ * -1 for fd.
+ *
+ * Returns 0 if the file can be trusted.
+ */
+int dvmIsClassFileTrusted(const char *fileName, int fd, off_t offset) {
+    int result = -1;
+    ssize_t len = -1;
+    unsigned char buffer[512];
+    EVP_MD_CTX digestContext;
+    WhitelistEntry hash;
+    char canonicalPath[PATH_MAX + 1];
+    bool externalFd = (fd >= 0);
+    u8 startTime, duration;
+
+    startTime = dvmGetThreadCpuTimeNsec();
+
+    /*
+     * In some use cases the whitelist system is not started
+     * (e.g. for dexopt). We recognize this by the fact that
+     * the global whitelist is not initialzed.
+     */
+    if (gDvm.executableWhitelist == NULL) {
+        result = 0;
+        goto bail;
+    }
+
+    /* 
+     * Trust system files implicitly.
+     */
+    if (realpath(fileName, canonicalPath) == NULL) {
+        ALOGW("Unable to canonicalize filename  %s - will check hash in any case", fileName);
+    }
+    else if (strstr(canonicalPath, "/system/") == canonicalPath) {
+        ALOGV("System file: %s", fileName);
+        result = 0;
+        goto bail;
+    }
+
+    if (!externalFd) {
+        fd = open(fileName, O_RDONLY);
+        if (fd < 0) {
+            ALOGE("Failed to open file %s: %s", fileName, strerror(errno));
+            goto bail;
+        }
+    }
+    else {
+        if (lseek(fd, offset, SEEK_SET) == (off_t)-1) {
+            ALOGE("Unable to rewind the to-be-optimized file: %s", strerror(errno));
+            goto bail;
+        }
+    }
+
+    /*
+     * Compute the file's hash.
+     */
+    if (!EVP_DigestInit(&digestContext, WHITELIST_HASH_ALGORITHM)) {
+        ALOGE("Failed to initialize the hash function");
+        goto bail;
+    }
+
+    while ((len = TEMP_FAILURE_RETRY(read(fd, buffer, sizeof(buffer)))) > 0) {
+        if (!EVP_DigestUpdate(&digestContext, buffer, len)) {
+            ALOGE("Hash update failed");
+            goto bail;
+        }
+    }
+
+    if (len < 0) {
+        ALOGE("Failed to read file %s: %s", fileName, strerror(errno));
+        goto bail;
+    }
+
+    if (!EVP_DigestFinal(&digestContext, hash.digest.longDigest, NULL)) {
+        ALOGE("Hash computation failed");
+        goto bail;
+    }
+
+    duration = (dvmGetThreadCpuTimeNsec() - startTime) / 1000;
+    ALOGI("Hash computation finished within %llu microseconds", duration);
+
+    /*
+     * Compare the hash to the list of trusted hashes.
+     */
+    startTime = dvmGetThreadCpuTimeNsec();
+    if (isInWhitelist(&hash)) {
+        result = 0;
+    }
+    duration = (dvmGetThreadCpuTimeNsec() - startTime) / 1000;
+    ALOGI("Whitelist lookup finished within %llu microseconds", duration);
+
+bail:
+    if (!externalFd && fd >= 0) {
+        if (close(fd) < 0)
+            ALOGE("Found error when closing file %s: %s", fileName, strerror(errno));
+        fd = -1;
+    }
+
+    return result;
+}
+
+int dvmIsClassDataTrusted(u1 *pBytes, u4 length) {
+    int result = -1;
+    EVP_MD_CTX digestContext;
+    WhitelistEntry hash;
+    u8 startTime, duration;
+
+    startTime = dvmGetThreadCpuTimeNsec();
+
+    /*
+     * In some use cases the whitelist system is not started
+     * (e.g. for dexopt). We recognize this by the fact that
+     * the global whitelist is not initialzed.
+     */
+    if (gDvm.executableWhitelist == NULL) {
+        result = 0;
+        goto bail;
+    }
+
+    if (!EVP_DigestInit(&digestContext, WHITELIST_HASH_ALGORITHM)) {
+        ALOGE("Failed to initialize the hash function");
+        goto bail;
+    }
+
+    if (!EVP_DigestUpdate(&digestContext, pBytes, length)) {
+        ALOGE("Hash update failed");
+        goto bail;
+    }
+
+    if (!EVP_DigestFinal(&digestContext, hash.digest.longDigest, NULL)) {
+        ALOGE("Hash computation failed");
+        goto bail;
+    }
+
+    duration = (dvmGetThreadCpuTimeNsec() - startTime) / 1000;
+    ALOGI("Hash computation finished within %llu microseconds", duration);
+
+    /*
+     * Compare the hash to the list of trusted hashes.
+     */
+    startTime = dvmGetThreadCpuTimeNsec();
+    if (isInWhitelist(&hash)) {
+        result = 0;
+    }
+    duration = (dvmGetThreadCpuTimeNsec() - startTime) / 1000;
+    ALOGI("Whitelist lookup finished within %llu microseconds", duration);
+
+bail:
+    return result;
+}
+
diff --git a/vm/Whitelist.h b/vm/Whitelist.h
new file mode 100644
index 0000000..d0141a5
--- /dev/null
+++ b/vm/Whitelist.h
@@ -0,0 +1,35 @@
+#ifndef WHITELIST_H
+#define WHITELIST_H
+
+#define WHITELIST_HASH_LEN 32
+#define WHITELIST_MAX_LEN 1000000
+
+struct WhitelistEntry {
+    union {
+        u4 shortDigest;
+        unsigned char longDigest[WHITELIST_HASH_LEN];
+    } digest;
+};
+
+struct Whitelist {
+    int numEntries;
+    WhitelistEntry entries[WHITELIST_MAX_LEN];
+    pthread_mutex_t mutex;
+};
+
+/*
+ * Determine whether a class file is trusted.
+ *
+ * Returns 0 for trustworthy files and <0 otherwise.
+ */
+int dvmIsClassFileTrusted(const char* fileName, int fd, off_t offset);
+int dvmIsClassDataTrusted(u1 *pBytes, u4 length);
+
+/*
+ * Initialization and cleanup.
+ */
+bool dvmWhitelistStartup();
+void dvmWhitelistShutdown();
+
+#endif
+
